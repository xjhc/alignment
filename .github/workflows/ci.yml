name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        # Improved cache key includes the Go version
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      working-directory: ./server
      run: go mod download

    - name: Format, Vet, and Lint
      working-directory: ./server
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi
        go vet ./...
    - uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./server

    - name: Test with race detection and coverage
      working-directory: ./server
      run: go test -race -coverprofile=coverage.out ./...
      env:
        # Use the same env var name as the application for consistency
        REDIS_ADDR: localhost:6379

    - name: Check test coverage
      working-directory: ./server
      run: |
        go tool cover -func=coverage.out
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        # Fail if coverage is below 80%
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below minimum 80%"
          exit 1
        fi

    - name: Build backend binary
      working-directory: ./server
      run: go build -o ../alignment-server ./cmd/server

    - name: Upload backend artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-binary
        path: alignment-server

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'

    - name: Install dependencies
      working-directory: ./client
      run: npm ci

    - name: Type check, Lint, and Test
      working-directory: ./client
      run: |
        npx tsc --noEmit
        npm run lint
        npm test

    - name: Build frontend
      working-directory: ./client
      run: npm run build

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: client/dist

  # This job now verifies the artifacts from the previous jobs
  verify-integration:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-binary

    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: client/dist

    - name: Verify artifacts
      run: |
        echo "Verifying downloaded artifacts..."
        ls -la alignment-server
        ls -la client/dist/
        echo "âœ… Integration artifacts successfully verified."